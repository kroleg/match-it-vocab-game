{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","correctnessClass","word","def","state","submitted","vocabulary","onClick","event","console","log","onPlayAgainClick","startGame","onWordClick","text","setState","chosenWord","onSubmitClick","onDefinitionClick","wordIndex","left","findIndex","matchedWords","push","splice","defIndex","right","d","matchedDefinitions","submitEnabled","length","_this2","react_default","a","createElement","className","map","index","App_Block","selected","disabled","wordsToUse","arr","n","result","Array","len","taken","RangeError","x","Math","floor","random","getRandom","entries","w2u","array","temporaryValue","randomIndex","currentIndex","shuffle","_this3","tabName","window","location","hash","replace","fetch","concat","then","_ref","asyncToGenerator","regenerator_default","mark","_callee","res","data","wrap","_context","prev","next","status","abrupt","error","json","sent","values","forEach","row","t0","message","stop","_x","apply","arguments","Component","Block","_this4","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce236279.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nconst SPREADSHEET_ID = '1O9Nkp5MddsdFbCy4MbxmyySxtDd8ZB6KccWyYAMM-3A';\nconst API_KEY = 'AIzaSyBs8RFSnZv_Vs1vvFBPZyd4q88M8p_9AMg';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.matchedWords = [];\n        this.matchedDefinitions = [];\n        this.left = [];\n        this.right = [];\n        this.state = {\n            chosenWord: '',\n            submitEnabled: false,\n            submitted: false\n        };\n        this.vocabulary = {};\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Word matching game</h1>\n                <div className=\"container matched\">\n                    {this.matchedWords.map((word, index) => <div className={'block-row ' + this.correctnessClass(word, this.matchedDefinitions[index])} >\n                        <Block text={word}/>\n                        <Block text={this.matchedDefinitions[index]}/>\n                    </div>)}\n                </div>\n                <div className=\"unmatched container\">\n                    <div className=\"words col\">\n                        {this.left.map(word => <div className='block-row'><Block text={word} selected={word === this.state.chosenWord}\n                                                                                 onClick={this.onWordClick}/></div>)}\n                    </div>\n                    <div className=\"definitions col\">\n                        {this.right.map(word => <div className='block-row'><Block text={word} onClick={this.onDefinitionClick}/></div>)}\n                    </div>\n                </div>\n                { this.state.submitted\n                    ? <button className='btn btn-play' onClick={this.onPlayAgainClick}>Play more</button>\n                    : <button className='btn btn-check' onClick={this.onSubmitClick} disabled={!this.state.submitEnabled}>Submit</button>\n                }\n\n            </div>\n        );\n    }\n\n    correctnessClass = (word, def) => {\n        if (!this.state.submitted) {\n            return ''\n        }\n        if (def === this.vocabulary[word]) {\n            return 'correct';\n        }\n        return 'incorrect';\n    }\n\n    startGame() {\n        const wordsToUse = getRandom(Object.entries(this.vocabulary), 5);\n        this.matchedWords = [];\n        this.matchedDefinitions = [];\n        this.left = wordsToUse.map(w2u => w2u[0]);\n        this.right = shuffle(wordsToUse.map(w2u => w2u[1]));\n        this.setState({ submitEnabled: false, submitted: false })\n    }\n\n    onClick = (event) => {\n        console.log(event);\n    }\n\n    onPlayAgainClick = () => {\n        this.startGame();\n    }\n\n    onWordClick = (text) => {\n        this.setState({chosenWord: text});\n    }\n\n    onSubmitClick = (text) => {\n        this.setState({ submitted: true})\n    }\n\n    onDefinitionClick = (text) => {\n        if (this.state.chosenWord) {\n            const wordIndex = this.left.findIndex(word => word === this.state.chosenWord);\n            this.matchedWords.push(this.left.splice(wordIndex, 1)[0]);\n            const defIndex = this.right.findIndex(d => d === text);\n            this.matchedDefinitions.push(this.right.splice(defIndex, 1)[0]);\n        }\n        this.setState({ chosenWord: '', submitEnabled: this.left.length === 0 });\n    }\n\n    componentDidMount() {\n        const tabName = window.location.hash ? window.location.hash.replace('#', '') : 'math';\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${tabName}?key=${API_KEY}`).then(async res => {\n            if (res.status !== 200) {\n                return this.setState({ error: 'Failed to retrieve data from google spreadsheet' });\n            }\n            const data = await res.json();\n            try {\n                data.values.forEach(row => {\n                    this.vocabulary[row[0]] = row[1];\n                });\n                this.startGame()\n            } catch (err) {\n                return this.setState({ error: err.message });\n            }\n\n        });\n    }\n}\n\nclass Block extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: false\n        }\n    }\n\n    render() {\n        return <div className={'block ' + (this.props.selected ? 'selected' : '')} onClick={this.onClick}>{this.props.text}</div>;\n    }\n\n    onClick = () => {\n        if (this.props.onClick) {\n            this.props.onClick(this.props.text);\n        }\n    }\n}\n\nexport default App;\n\nfunction getRandom(arr, n) {\n    if (n > arr.length) {\n        n = arr.length\n    }\n    var result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        var x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}